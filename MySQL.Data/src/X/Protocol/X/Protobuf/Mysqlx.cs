// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mysqlx.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mysqlx {

  /// <summary>Holder for reflection information generated from mysqlx.proto</summary>
  internal static partial class MysqlxReflection {

    #region Descriptor
    /// <summary>File descriptor for mysqlx.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MysqlxReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxteXNxbHgucHJvdG8SBk15c3FseCL+AgoOQ2xpZW50TWVzc2FnZXMi6wIK",
            "BFR5cGUSCAoETk9ORRAAEhgKFENPTl9DQVBBQklMSVRJRVNfR0VUEAESGAoU",
            "Q09OX0NBUEFCSUxJVElFU19TRVQQAhINCglDT05fQ0xPU0UQAxIbChdTRVNT",
            "X0FVVEhFTlRJQ0FURV9TVEFSVBAEEh4KGlNFU1NfQVVUSEVOVElDQVRFX0NP",
            "TlRJTlVFEAUSDgoKU0VTU19SRVNFVBAGEg4KClNFU1NfQ0xPU0UQBxIUChBT",
            "UUxfU1RNVF9FWEVDVVRFEAwSDQoJQ1JVRF9GSU5EEBESDwoLQ1JVRF9JTlNF",
            "UlQQEhIPCgtDUlVEX1VQREFURRATEg8KC0NSVURfREVMRVRFEBQSDwoLRVhQ",
            "RUNUX09QRU4QGBIQCgxFWFBFQ1RfQ0xPU0UQGRIUChBDUlVEX0NSRUFURV9W",
            "SUVXEB4SFAoQQ1JVRF9NT0RJRllfVklFVxAfEhIKDkNSVURfRFJPUF9WSUVX",
            "ECAi4gIKDlNlcnZlck1lc3NhZ2VzIs8CCgRUeXBlEgYKAk9LEAASCQoFRVJS",
            "T1IQARIVChFDT05OX0NBUEFCSUxJVElFUxACEh4KGlNFU1NfQVVUSEVOVElD",
            "QVRFX0NPTlRJTlVFEAMSGAoUU0VTU19BVVRIRU5USUNBVEVfT0sQBBIKCgZO",
            "T1RJQ0UQCxIeChpSRVNVTFRTRVRfQ09MVU1OX01FVEFfREFUQRAMEhEKDVJF",
            "U1VMVFNFVF9ST1cQDRIYChRSRVNVTFRTRVRfRkVUQ0hfRE9ORRAOEh0KGVJF",
            "U1VMVFNFVF9GRVRDSF9TVVNQRU5ERUQQDxIoCiRSRVNVTFRTRVRfRkVUQ0hf",
            "RE9ORV9NT1JFX1JFU1VMVFNFVFMQEBIXChNTUUxfU1RNVF9FWEVDVVRFX09L",
            "EBESKAokUkVTVUxUU0VUX0ZFVENIX0RPTkVfTU9SRV9PVVRfUEFSQU1TEBIi",
            "EQoCT2sSCwoDbXNnGAEgASgJIoEBCgVFcnJvchIoCghzZXZlcml0eRgBIAEo",
            "DjIWLk15c3FseC5FcnJvci5TZXZlcml0eRIMCgRjb2RlGAIgASgNEhEKCXNx",
            "bF9zdGF0ZRgEIAEoCRILCgNtc2cYAyABKAkiIAoIU2V2ZXJpdHkSCQoFRVJS",
            "T1IQABIJCgVGQVRBTBABQhkKF2NvbS5teXNxbC5jai54LnByb3RvYnVmYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.ClientMessages), global::Mysqlx.ClientMessages.Parser, null, null, new[]{ typeof(global::Mysqlx.ClientMessages.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.ServerMessages), global::Mysqlx.ServerMessages.Parser, null, null, new[]{ typeof(global::Mysqlx.ServerMessages.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Ok), global::Mysqlx.Ok.Parser, new[]{ "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mysqlx.Error), global::Mysqlx.Error.Parser, new[]{ "Severity", "Code", "SqlState", "Msg" }, null, new[]{ typeof(global::Mysqlx.Error.Types.Severity) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  IDs of messages that can be sent from client to the server
  ///
  ///  .. note::
  ///    this message is never sent on the wire. It is only used to let ``protoc``
  ///
  ///    * generate constants
  ///    * check for uniqueness
  /// </summary>
  internal sealed partial class ClientMessages : pb::IMessage<ClientMessages> {
    private static readonly pb::MessageParser<ClientMessages> _parser = new pb::MessageParser<ClientMessages>(() => new ClientMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mysqlx.MysqlxReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessages(ClientMessages other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientMessages Clone() {
      return new ClientMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientMessages other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClientMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    internal static partial class Types {
      internal enum Type {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("CON_CAPABILITIES_GET")] ConCapabilitiesGet = 1,
        [pbr::OriginalName("CON_CAPABILITIES_SET")] ConCapabilitiesSet = 2,
        [pbr::OriginalName("CON_CLOSE")] ConClose = 3,
        [pbr::OriginalName("SESS_AUTHENTICATE_START")] SessAuthenticateStart = 4,
        [pbr::OriginalName("SESS_AUTHENTICATE_CONTINUE")] SessAuthenticateContinue = 5,
        [pbr::OriginalName("SESS_RESET")] SessReset = 6,
        [pbr::OriginalName("SESS_CLOSE")] SessClose = 7,
        [pbr::OriginalName("SQL_STMT_EXECUTE")] SqlStmtExecute = 12,
        [pbr::OriginalName("CRUD_FIND")] CrudFind = 17,
        [pbr::OriginalName("CRUD_INSERT")] CrudInsert = 18,
        [pbr::OriginalName("CRUD_UPDATE")] CrudUpdate = 19,
        [pbr::OriginalName("CRUD_DELETE")] CrudDelete = 20,
        [pbr::OriginalName("EXPECT_OPEN")] ExpectOpen = 24,
        [pbr::OriginalName("EXPECT_CLOSE")] ExpectClose = 25,
        [pbr::OriginalName("CRUD_CREATE_VIEW")] CrudCreateView = 30,
        [pbr::OriginalName("CRUD_MODIFY_VIEW")] CrudModifyView = 31,
        [pbr::OriginalName("CRUD_DROP_VIEW")] CrudDropView = 32,
      }

    }
    #endregion

  }

  /// <summary>
  ///  IDs of messages that can be sent from server to client
  ///
  ///  .. note::
  ///    this message is never sent on the wire. It is only used to let ``protoc``
  ///
  ///    * generate constants
  ///    * check for uniqueness
  /// </summary>
  internal sealed partial class ServerMessages : pb::IMessage<ServerMessages> {
    private static readonly pb::MessageParser<ServerMessages> _parser = new pb::MessageParser<ServerMessages>(() => new ServerMessages());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mysqlx.MysqlxReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessages(ServerMessages other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerMessages Clone() {
      return new ServerMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerMessages other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    internal static partial class Types {
      internal enum Type {
        [pbr::OriginalName("OK")] Ok = 0,
        [pbr::OriginalName("ERROR")] Error = 1,
        [pbr::OriginalName("CONN_CAPABILITIES")] ConnCapabilities = 2,
        [pbr::OriginalName("SESS_AUTHENTICATE_CONTINUE")] SessAuthenticateContinue = 3,
        [pbr::OriginalName("SESS_AUTHENTICATE_OK")] SessAuthenticateOk = 4,
        /// <summary>
        ///  NOTICE has to stay at 11 forever
        /// </summary>
        [pbr::OriginalName("NOTICE")] Notice = 11,
        [pbr::OriginalName("RESULTSET_COLUMN_META_DATA")] ResultsetColumnMetaData = 12,
        [pbr::OriginalName("RESULTSET_ROW")] ResultsetRow = 13,
        [pbr::OriginalName("RESULTSET_FETCH_DONE")] ResultsetFetchDone = 14,
        [pbr::OriginalName("RESULTSET_FETCH_SUSPENDED")] ResultsetFetchSuspended = 15,
        [pbr::OriginalName("RESULTSET_FETCH_DONE_MORE_RESULTSETS")] ResultsetFetchDoneMoreResultsets = 16,
        [pbr::OriginalName("SQL_STMT_EXECUTE_OK")] SqlStmtExecuteOk = 17,
        [pbr::OriginalName("RESULTSET_FETCH_DONE_MORE_OUT_PARAMS")] ResultsetFetchDoneMoreOutParams = 18,
      }

    }
    #endregion

  }

  /// <summary>
  ///  generic Ok message
  /// </summary>
  internal sealed partial class Ok : pb::IMessage<Ok> {
    private static readonly pb::MessageParser<Ok> _parser = new pb::MessageParser<Ok>(() => new Ok());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ok> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mysqlx.MysqlxReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ok() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ok(Ok other) : this() {
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ok Clone() {
      return new Ok(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private string msg_ = "";
    /// <summary>
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ok);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ok other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ok other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  generic Error message
  ///
  ///  A ``severity`` of ``ERROR`` indicates the current message sequence is
  ///  aborted for the given error and the session is ready for more.
  ///
  ///  In case of a ``FATAL`` error message the client should not expect
  ///  the server to continue handling any further messages and should
  ///  close the connection.
  ///
  ///  :param severity: severity of the error message
  ///  :param code: error-code
  ///  :param sql_state: SQL state
  ///  :param msg: human readable error message
  /// </summary>
  internal sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mysqlx.MysqlxReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      severity_ = other.severity_;
      code_ = other.code_;
      sqlState_ = other.sqlState_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 1;
    private global::Mysqlx.Error.Types.Severity severity_ = 0;
    /// <summary>
    /// optional [ default = ERROR ]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Mysqlx.Error.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private uint code_;
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "sql_state" field.</summary>
    public const int SqlStateFieldNumber = 4;
    private string sqlState_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SqlState {
      get { return sqlState_; }
      set {
        sqlState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    /// <summary>
    /// required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Severity != other.Severity) return false;
      if (Code != other.Code) return false;
      if (SqlState != other.SqlState) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Severity != 0) hash ^= Severity.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (SqlState.Length != 0) hash ^= SqlState.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Severity != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Severity);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (SqlState.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SqlState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Severity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (SqlState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SqlState);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Severity != 0) {
        Severity = other.Severity;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.SqlState.Length != 0) {
        SqlState = other.SqlState;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            severity_ = (global::Mysqlx.Error.Types.Severity) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
          case 34: {
            SqlState = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Error message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    internal static partial class Types {
      internal enum Severity {
        [pbr::OriginalName("ERROR")] Error = 0,
        [pbr::OriginalName("FATAL")] Fatal = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
